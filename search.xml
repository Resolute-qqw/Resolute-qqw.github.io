<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>workerman 简单入门</title>
      <link href="/2019/01/07/workerman/"/>
      <url>/2019/01/07/workerman/</url>
      
        <content type="html"><![CDATA[<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><h2 id="什么是-WebSocket"><a href="#什么是-WebSocket" class="headerlink" title="什么是 WebSocket"></a>什么是 WebSocket</h2><p>WebSocket协议是基于 <code>TCP</code> 的一种新的 <code>网络协议</code>。</p><p>它实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。</p><h2 id="WebSocket-和-HTTP-的区别"><a href="#WebSocket-和-HTTP-的区别" class="headerlink" title="WebSocket 和 HTTP 的区别"></a>WebSocket 和 HTTP 的区别</h2><p>HTTP协议的特点：</p><p>​    1、服务器只能响应客户端的请求，不能主动向客户端推送数据</p><p>​    2、客户端的每次请求都需要连接、断开，即每次请求都是一个全新的请求</p><p>WebSocket的特点：</p><p>​    1、客户端与服务器端在连接时可以互相推据数据</p><p>​    2、客户端连接到服务器之后，会一直保持连接的状态，直到有一端主动断开连接</p><h2 id="应用范围"><a href="#应用范围" class="headerlink" title="应用范围"></a>应用范围</h2><p>WebSocket 一般用来开发<code>聊天室</code>、<code>网页游戏</code>等需要长连接并且可以双向通信的应用程序。</p><p><img src="/medias/assets/image-20181109162131008.png" alt="image-20181109162131008"></p><h2 id="PHP-实现-WebSocket"><a href="#PHP-实现-WebSocket" class="headerlink" title="PHP 实现 WebSocket"></a>PHP 实现 WebSocket</h2><p>在 PHP 中实现 <code>WebSocket</code> 可以使用 <code>Swoole</code> 或者 <code>Workerman</code>。</p><p>Swoole 和 Workerman 是两个 PHP 中使用的多进程 socket 服务器框架，支持HTTP、WebSocket、Tcp、Udp等多种协议。</p><p>Swoole：是用 C 语言开发的 PHP 扩展，只能在 Linux 上使用，性能更好、上手有点难度。</p><p>Workerman：是用 PHP 开发的框架，windows 和 Linux 上都可以使用，无须安装下载即可使用、性能相对swoole弱一些，上手比较简单。</p><h1 id="Workerman"><a href="#Workerman" class="headerlink" title="Workerman"></a>Workerman</h1><p>官方文档：<a href="http://doc.workerman.net/" target="_blank" rel="noopener">http://doc.workerman.net/</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Workerman 无须安装，下载、引入之后即可使用。</p><p>下载地址：<a href="https://www.workerman.net/download/workermanzip" target="_blank" rel="noopener">https://www.workerman.net/download/workermanzip</a></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>下载之后直接引入使用：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">use</span> <span class="token package">Workerman<span class="token punctuation">\</span>Worker</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token string">'下载目录/Workerman-master/Autoloader.php'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实例化 Worker 类对象</span><span class="token variable">$worker</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>'websocket<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//0.0.0.0:8686');</span></code></pre><h2 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h2><p>workerman 中最核心的两个类是 <code>Worker</code> 和 <code>TcpConnection</code> 类。</p><p>Worker：端口监听、启动服务、接收请求等。</p><p>TcpConnection：负责管理每个连接的客户端，接收客户端信息，发送客户端信息等。</p><h3 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h3><p>Worker用来绑定端口、启动服务器。</p><ul><li>构造函数</li></ul><p>创建 Worker 时需要指定协议、IP和端口号。</p><p>比如：启动 websocket 服务器，绑定到 8686 端口（1~65535，1000以 内的端口号留给系统）：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$worker</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>'websocket<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//0.0.0.0:8686');</span></code></pre><ul><li>重要属性</li></ul><p>connections：保存所有连接的客户端对象（TcpConnection类对象）的数组。</p><p>count：启动的进程数，默认是1（我们现在先只启动1个，启动多会出现多进程的问题）。</p><ul><li>回调函数</li></ul><p>onWorkerStart：当子进程启动时触发的函数，一般做一些初始化的功能，连接数据库等。</p><p>onConnect：当有客户端连接成功时触发的函数。</p><p>onMessage：当收到客户端的数据时触发的函数。</p><p>onClose：当与客户端断开连接时触发的函数。</p><ul><li>接口</li></ul><p>runAll：启动程序。</p><p>示例代码：</p><p>server.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">use</span> <span class="token package">Workerman<span class="token punctuation">\</span>Worker</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token string">'../Workerman-master/Autoloader.php'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动时调用</span><span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token variable">$worker</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'启动成功！'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 有连接时调用</span><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'有客户端连接~'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 当收到数据时调用</span><span class="token keyword">function</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'收到消息'</span><span class="token punctuation">.</span><span class="token variable">$data</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 当有客户端断开连接时调用</span><span class="token keyword">function</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'有客户端断开连接~'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 绑定端口</span><span class="token variable">$worker</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>'websocket<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//0.0.0.0:8686');</span><span class="token comment" spellcheck="true">// 设置进程数为1</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置回调函数</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onWorkerStart</span> <span class="token operator">=</span> <span class="token string">'start'</span><span class="token punctuation">;</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onConnect</span> <span class="token operator">=</span> <span class="token string">'connect'</span><span class="token punctuation">;</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onMessage</span> <span class="token operator">=</span> <span class="token string">'message'</span><span class="token punctuation">;</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onClose</span> <span class="token operator">=</span> <span class="token string">'close'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动</span>Worker<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">runAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="TcpConnection"><a href="#TcpConnection" class="headerlink" title="TcpConnection"></a>TcpConnection</h3><p>每个客户端的连接就是一个 <code>TcpConnection</code> 类的对象，所以上面代码中的 <code>$connection</code> 就是 <code>TcpConnection</code> 这个类的对象，通过这个对象我们就可以获取客户端的信息，也可以向客户端发送数据。</p><ul><li>重要属性</li></ul><p>id：每个客户端都有一个 id，它是一个自增的整数，可以通过这个 id 来区别客户端。</p><p>worker：当前这个连接所属的 worker 对象。</p><ul><li>接口</li></ul><p>send：向客户端发送数据。</p><p>close：关闭与这个客户端的连接。</p><p>示例代码、当收到消息时，把消息转发给所有其它的客户端：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">use</span> <span class="token package">Workerman<span class="token punctuation">\</span>Worker</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token string">'../Workerman-master/Autoloader.php'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动时调用</span><span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token variable">$worker</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'启动成功！'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 有连接时调用</span><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'有客户端连接~'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 当收到数据时调用</span><span class="token keyword">function</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 循环所有客户端</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connections</span> <span class="token keyword">as</span> <span class="token variable">$c</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果不是自己就转发消息</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span> <span class="token operator">!=</span> <span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 当有客户端断开连接时调用</span><span class="token keyword">function</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'有客户端断开连接~'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 绑定端口</span><span class="token variable">$worker</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>'websocket<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//0.0.0.0:8686');</span><span class="token comment" spellcheck="true">// 设置进程数为1</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置回调函数</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onWorkerStart</span> <span class="token operator">=</span> <span class="token string">'start'</span><span class="token punctuation">;</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onConnect</span> <span class="token operator">=</span> <span class="token string">'connect'</span><span class="token punctuation">;</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onMessage</span> <span class="token operator">=</span> <span class="token string">'message'</span><span class="token punctuation">;</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onClose</span> <span class="token operator">=</span> <span class="token string">'close'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动</span>Worker<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">runAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="启动、关闭"><a href="#启动、关闭" class="headerlink" title="启动、关闭"></a>启动、关闭</h2><p>与之前学习的程序不同 workerman 的程序是在命令行中运行的。</p><p>可以使用以下指令启动、关闭程序：</p><pre><code>php server.php start      // 启动php server.php stop       // 关闭程序</code></pre><p>示例、启动（ server.php 为脚本的名字）</p><p><img src="/medias/assets/image-20181109154349862.png" alt="image-20181109154349862"></p><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>使用 PHP 启动了 WebSocket 服务器之后，会在服务器上监听一个端口号（上面代码中的 8686）。有了服务器之后，我们就可以编写前端代码连接服务器进行数据通信。</p><p>客户端可以是任何一个支持 <code>WebSocket</code> 协议的软件，我们常用的就是浏览器。</p><p>在浏览器中编写代码自然是使用 <code>JavaScript</code> 语言了。</p><h2 id="JS-中的-WebSocket"><a href="#JS-中的-WebSocket" class="headerlink" title="JS 中的 WebSocket"></a>JS 中的 WebSocket</h2><p>使用 JavaScript 实现 WebSocket 非常的简单，只需要以下几步：</p><p>1、连接服务器</p><p>2、绑定回调函数接收、处理数据</p><p>3、调用 send 方法发送数据</p><h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p>JS 中提供了一个 WebSocket 类，可以通过 new 来连接服务器，连接时需要指定服务器的IP地址和端口号：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://ip:端口号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="绑定回调函数"><a href="#绑定回调函数" class="headerlink" title="绑定回调函数"></a>绑定回调函数</h2><p>连接了服务器之后，我们需要绑定几个回调函数，来处理相应的事件：</p><p>onopen：当连接成功时触发。</p><p>onmessage：当收到消息时触发。</p><p>onclose：当与服务器断开连接时触发。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 连接服务器成功时触发</span>ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 收到服务器消息时触发</span>ws<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到服务端的消息："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 与服务器断开连接时触发</span>ws<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"与服务器断开连接"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>可以调用 <code>send</code> 方法向服务器发送数据，也可以调用 <code>close</code> 方法断开和服务器的连接：</p><pre class=" language-js"><code class="language-js">ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello Tom'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 向服务器发送数据</span>ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 断开连接</span></code></pre><p>示例代码：</p><p>client.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>WebSocket 客户端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://127.0.0.1:8686"</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span>    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"给服务端发送一个字符串：tom"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ws<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到服务端的消息："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ws<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"与服务器断开连接"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>前、后端图解：</p><p><img src="/medias/assets/image-20181109160733327.png" alt="image-20181109160733327"></p><h1 id="连接时传递参数"><a href="#连接时传递参数" class="headerlink" title="连接时传递参数"></a>连接时传递参数</h1><p>有时，我们希望在客户端连接服务器时就传递一些参数，这时可以这样做：</p><p>客户端在连接时通过 GET 方式传递参数：</p><pre class=" language-js"><code class="language-js">ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://127.0.0.1:8686?name=tom&amp;age=10'</span><span class="token punctuation">)</span></code></pre><p>服务器端在连接时接收参数：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$worker</span><span class="token operator">-</span>onConnect<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onWebSocketConnect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$http_header</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用 $_GET 接收参数：</span>        <span class="token keyword">echo</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="案例、聊天室：群聊天"><a href="#案例、聊天室：群聊天" class="headerlink" title="案例、聊天室：群聊天"></a>案例、聊天室：群聊天</h1><p>核心思路：使用 Worker 类的 connections 属性可以得到保存所有客户端 $connection 对象的数组，然后我们可以循环这个数组调用每个客户端的 send 方法给每个客户端发消息。</p><p>服务器端：server.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*WebSocket 的服务器端*/</span><span class="token keyword">use</span> <span class="token package">Workerman<span class="token punctuation">\</span>Worker</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token string">'../Workerman-master/Autoloader.php'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实例化 Worker 类对象</span><span class="token variable">$worker</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>'websocket<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//0.0.0.0:8686');</span><span class="token comment" spellcheck="true">// 设置进程数</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置回调函数</span><span class="token comment" spellcheck="true">// 绑定连接的回调函数，这个函数会在有客户端连接时调用</span><span class="token comment" spellcheck="true">// 参数：TcpConnection 类的对象，代表每个客户端</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onConnect</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token variable">$connection</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 向这个客户端发数据</span>    <span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'欢迎您~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 接收消息</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onMessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$worker</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环所有的客户端，给它们发消息</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connections</span> <span class="token keyword">as</span> <span class="token variable">$c</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行</span>Worker<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">runAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>客户端：index.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(v,k) in messages<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                有人说：{{v}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>发送<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        ws<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 保存 WebSocket 对象</span>        content<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        messages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 保存所有接收的消息</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 当 vue 创建时调用</span>    created<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://127.0.0.1:8686'</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>open        <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        submit<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 把框里的内容发送到服务器</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 清空框</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        open<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'连接成功！'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        message<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 把接收到的消息放到页面中（e.data 就是接收的数据）</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="案例、聊天室：频道聊天"><a href="#案例、聊天室：频道聊天" class="headerlink" title="案例、聊天室：频道聊天"></a>案例、聊天室：频道聊天</h1><p>频道列表页：index.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">li</span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>房间列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(v,k) in rooms<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>room.html?id<span class="token punctuation">=</span><span class="token punctuation">'</span> + v.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{v.title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>主播：{{v.username}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rooms<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                title<span class="token punctuation">:</span> <span class="token string">'世界杯'</span><span class="token punctuation">,</span>                username<span class="token punctuation">:</span> <span class="token string">'大灰狼'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                title<span class="token punctuation">:</span> <span class="token string">'PHP'</span><span class="token punctuation">,</span>                username<span class="token punctuation">:</span> <span class="token string">'大雷'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>频道聊天室：room.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(v,k) in messages<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                有人说：{{v}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>发送<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        ws<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 保存 WebSocket 对象</span>        content<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        messages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 保存所有接收的消息</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 当 vue 创建时调用</span>    created<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> <span class="token keyword">get</span> <span class="token operator">=</span> <span class="token function">GetRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 获取 id</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://127.0.0.1:8686?room_id='</span><span class="token operator">+</span><span class="token keyword">get</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>open        <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        submit<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 把框里的内容发送到服务器</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 清空框</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        open<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'连接成功！'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        message<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 把接收到的消息放到页面中（e.data 就是接收的数据）</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 从百度里找到的一个可以接收所有 URL 上?后的参数的函数</span><span class="token comment" spellcheck="true">// 这个函数会解析 url 上的参数并返回一个对象，保存所有的参数</span><span class="token comment" spellcheck="true">// 返回数据：{id:1}</span><span class="token keyword">function</span> <span class="token function">GetRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> url <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取url中"?"符后的字串   </span>   <span class="token keyword">var</span> theRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">var</span> str <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         strs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            theRequest<span class="token punctuation">[</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">unescape</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> theRequest<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>服务器：server.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*WebSocket 的服务器端*/</span><span class="token keyword">use</span> <span class="token package">Workerman<span class="token punctuation">\</span>Worker</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token string">'../Workerman-master/Autoloader.php'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实例化 Worker 类对象</span><span class="token variable">$worker</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>'websocket<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//0.0.0.0:8686');</span><span class="token comment" spellcheck="true">// 设置进程数</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义一个房间的数组，保存每个房间中的客户端，这样在群发时就不需要循环所有的客户端了，只需要循环自己房间这个数组即可（这样做会占用更多的内存，但性能会提高（内存换性能））$rooms[    1  => [小明，三毛, '四娃']    2  => [大娃，二娃，三娃]];$rooms[1][] = '四娃'结构：二维数组下标：房间的ID值：保存房间中所有的客户端*/</span><span class="token variable">$rooms</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绑定连接的回调函数，这个函数会在有客户端连接时调用</span><span class="token comment" spellcheck="true">// 参数：TcpConnection 类的对象，代表每个客户端</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onConnect</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token variable">$connection</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 为了能够使用 $_GET 接收连接时的参数，我们需要在这里绑定一个 onWebSocketConnect</span>    <span class="token comment" spellcheck="true">// 的回调函数，然后在函数中就可以使用 $_GET 接收参数了</span>    <span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onWebSocketConnect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$http_header</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 保存这个客户端所在的房间号</span>        <span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">room_id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'room_id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">global</span> <span class="token variable">$rooms</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把这个客户端保存到自己房间的数组中</span>        <span class="token variable">$rooms</span><span class="token punctuation">[</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'room_id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 接收消息</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onMessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$worker</span><span class="token punctuation">,</span> <span class="token variable">$rooms</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 只循环发消息这个客户端所在的房间数组中的客户端</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$rooms</span><span class="token punctuation">[</span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">room_id</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$c</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当有客户端断开连接就从数组中删除</span><span class="token comment" spellcheck="true">// 参数 $connection 代表断开连接的客户端</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onClose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从房间数组中删除这个客户端</span>    <span class="token keyword">global</span> <span class="token variable">$rooms</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环这个客户端所在的房间数组，并找到这个客户端在数组中的下标 ，然后删除</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$rooms</span><span class="token punctuation">[</span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">room_id</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$c</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token operator">==</span> <span class="token variable">$connection</span><span class="token punctuation">)</span>            <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$rooms</span><span class="token punctuation">[</span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">room_id</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行</span>Worker<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">runAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="聊天室"><a href="#聊天室" class="headerlink" title="聊天室"></a>聊天室</h1><p>GitHub 地址：<a href="https://github.com/fortheday001/workerman-chat.git" target="_blank" rel="noopener">https://github.com/fortheday001/workerman-chat.git</a> </p><p>使用技术：websocket、workerman、vue</p><p>效果：输入用户名进入聊天室，进入之后可以开始群聊。</p><p><img src="/medias/assets/image-20181110112522268.png" alt="image-20181110112522268"></p><p>学习完之后的作业：</p><p>1、添加私聊功能</p><p>2、保存聊天记录</p><p>3、添加注册、登录功能（温馨提示：如果是前后端分离的方式开发，那么是不能使用 SESSION、COOKIE 的，这时需要使用令牌（JWT）实现登录功能）</p><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>server.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">use</span> <span class="token package">Workerman<span class="token punctuation">\</span>Worker</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token string">'../Workerman-master/Autoloader.php'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 保存所有用户</span><span class="token variable">$allUsers</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 有连接时调用</span><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onWebSocketConnect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$http_header</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$allUsers</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保存当前用户到用户列表</span>        <span class="token variable">$allUsers</span><span class="token punctuation">[</span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'username'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保存当前用户名到当前连接的 $connection 对象上</span>        <span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给所有客户端发消息</span>        <span class="token function">sendToAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token string">'username'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span><span class="token punctuation">,</span>            <span class="token string">'content'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'加入了聊天室'</span><span class="token punctuation">,</span>            <span class="token string">'datetime'</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'Y-m-d H:i'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'allUsers'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$allUsers</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 当收到数据时调用</span><span class="token keyword">function</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 转发消息给所有客户端</span>    <span class="token function">sendToAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">'username'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span><span class="token punctuation">,</span>        <span class="token string">'content'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$data</span><span class="token punctuation">,</span>        <span class="token string">'datetime'</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'Y-m-d H:i'</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 当有客户端断开连接时调用</span><span class="token keyword">function</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$allUsers</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从用户列表数组中删除当前退出的用户</span>    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$allUsers</span><span class="token punctuation">[</span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给所有用户发消息</span>    <span class="token function">sendToAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">'username'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span><span class="token punctuation">,</span>        <span class="token string">'content'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'离开了聊天室'</span><span class="token punctuation">,</span>        <span class="token string">'datetime'</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'Y-m-d H:i'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'allUsers'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$allUsers</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 给所有人发消息</span><span class="token keyword">function</span> <span class="token function">sendToAll</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$worker</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 循环所有客户端</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connections</span> <span class="token keyword">as</span> <span class="token variable">$c</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 绑定端口</span><span class="token variable">$worker</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>'websocket<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//0.0.0.0:8686');</span><span class="token comment" spellcheck="true">// 设置进程数为1</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置回调函数</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onConnect</span> <span class="token operator">=</span> <span class="token string">'connect'</span><span class="token punctuation">;</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onMessage</span> <span class="token operator">=</span> <span class="token string">'message'</span><span class="token punctuation">;</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onClose</span> <span class="token operator">=</span> <span class="token string">'close'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动</span>Worker<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">runAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><p>room.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>聊天室<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 消息列表 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message-list box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>消息列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(v,k) in messageList<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>k<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>{{v.username}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> 在 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>time</span><span class="token punctuation">></span></span>{{ v.datetime }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>time</span><span class="token punctuation">></span></span> 说：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>{{ v.content }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 用户列表 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user-list box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>用户列表 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logout<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userClicked<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(v,k) in userList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ v.username }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 发送消息框 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container send-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn-send<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>发送<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 登录表单 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>login<span class="token punctuation">'</span>:true,<span class="token punctuation">'</span>hide<span class="token punctuation">'</span>:layerHide}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dologin<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 登录时黑色背景层 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>layer<span class="token punctuation">'</span>:true,<span class="token punctuation">'</span>hide<span class="token punctuation">'</span>:layerHide}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>room.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>style.css</p><pre class=" language-css"><code class="language-css"><span class="token selector">html,body,div,ul,form,dl,dt,dd </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a </span><span class="token punctuation">{</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.hide</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#CCC</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box</span> h3 </span><span class="token punctuation">{</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.message-list</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.message-list</span> dl </span><span class="token punctuation">{</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.message-list</span> dt </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.message-list</span> dd </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.message-list</span> time </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.user-list</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.user-list</span> li </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.user-list</span> li<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.send-box</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.send-box</span> textarea </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">92%</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">85%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#btn-send</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">13%</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.layer</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">8888</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">.5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.login</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#999</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">9999</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>room.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        messageList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 消息列表</span>        userList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 在线用户列表  </span>        message<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 消息框中的内容</span>        ws<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">// websocket 对象</span>        layerHide<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 是否隐藏登录框</span>        host<span class="token punctuation">:</span> <span class="token string">'127.0.0.1:8686'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 服务器地址</span>        username<span class="token punctuation">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 当前用户名</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 退出按钮</span>        logout<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> undefined            <span class="token keyword">this</span><span class="token punctuation">.</span>layerHide <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 登录按钮</span>        dologin<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>layerHide <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ws_conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 发消息按钮</span>        send<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 聊天列表滚动到底部</span>        scrollToBottom<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.message-list'</span><span class="token punctuation">)</span>            d<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> d<span class="token punctuation">.</span>scrollHeight        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 收到消息时调用</span>        ws_message<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>messageList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scrollToBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>allUsers<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>userList <span class="token operator">=</span> data<span class="token punctuation">.</span>allUsers            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 连接服务器</span>        ws_conn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>host<span class="token operator">+</span><span class="token string">'?username='</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ws_open            <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ws_message            <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ws_close        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 页面初始化</span>    created<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>layerHide <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ws_conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h1 id="坦克大战"><a href="#坦克大战" class="headerlink" title="坦克大战"></a>坦克大战</h1><p>GitHub 地址：<a href="https://github.com/fortheday001/workerman-tankwar.git" target="_blank" rel="noopener">https://github.com/fortheday001/workerman-tankwar.git</a></p><h2 id="服务器端-1"><a href="#服务器端-1" class="headerlink" title="服务器端"></a>服务器端</h2><p>server.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">use</span> <span class="token package">Workerman<span class="token punctuation">\</span>Worker</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token string">'../Workerman-master/Autoloader.php'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 保存所有坦克</span><span class="token variable">$tanks</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 有连接时调用</span><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onWebSocketConnect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$http_header</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$tanks</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把服务器上保存的所有坦克的信息发送给该客户端</span>        <span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token string">'type'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'all'</span><span class="token punctuation">,</span>            <span class="token string">'tanks'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$tanks</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在服务器上保存当前坦克的信息</span>        <span class="token variable">$tanks</span><span class="token punctuation">[</span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给所有其它客户端发送添加当前坦克的消息</span>        <span class="token function">sendToAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token string">'type'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'add'</span><span class="token punctuation">,</span>            <span class="token string">'id'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">,</span>            <span class="token string">'left'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'top'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 当收到移动数据时调用</span><span class="token keyword">function</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$tanks</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新服务器上保存的当前坦克的位置信息</span>    <span class="token variable">$tanks</span><span class="token punctuation">[</span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把坦克移动之后的位置发送给所有其它客户端</span>    <span class="token function">sendToAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">'type'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'move'</span><span class="token punctuation">,</span>        <span class="token string">'id'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">,</span>        <span class="token string">'left'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$tanks</span><span class="token punctuation">[</span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'top'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$tanks</span><span class="token punctuation">[</span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'transform'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$tanks</span><span class="token punctuation">[</span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 当有客户端断开连接时调用</span><span class="token keyword">function</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$tanks</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从服务器中删除当前客户端的信息</span>    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$tanks</span><span class="token punctuation">[</span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通知所有客户端删除该坦克</span>    <span class="token function">sendToAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">'type'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'remove'</span><span class="token punctuation">,</span>        <span class="token string">'id'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 功能函数：给所有客户端发消息，可以通过第二个参数排除某个客户端</span><span class="token keyword">function</span> <span class="token function">sendToAll</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$except</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$worker</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果是数组就转成 JSON 字符串</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环所有客户端</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connections</span> <span class="token keyword">as</span> <span class="token variable">$c</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 跳过要排除的客户端（不给这个客户端发消息）</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$except</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$except</span><span class="token operator">==</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发消息</span>        <span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 绑定端口</span><span class="token variable">$worker</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>'websocket<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//0.0.0.0:8686');</span><span class="token comment" spellcheck="true">// 设置进程数为1</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置回调函数</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onConnect</span> <span class="token operator">=</span> <span class="token string">'connect'</span><span class="token punctuation">;</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onMessage</span> <span class="token operator">=</span> <span class="token string">'message'</span><span class="token punctuation">;</span><span class="token variable">$worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">onClose</span> <span class="token operator">=</span> <span class="token string">'close'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动</span>Worker<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">runAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h2><p>tank.html</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>坦克大战<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"style.css"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"tank.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>style.css</p><pre class=" language-css"><code class="language-css"><span class="token selector">html,body,div,ul,form,dl,dt,dd </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a </span><span class="token punctuation">{</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.tank</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.tank</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">45%</span><span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.tank</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">40%</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">35%</span><span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>tank.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token keyword">null</span>       <span class="token comment" spellcheck="true">// 我的坦克</span><span class="token keyword">var</span> allTanks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">// 所有坦克</span><span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token comment" spellcheck="true">// WebSocket 对象</span><span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token string">'127.0.0.1:8686'</span>      <span class="token comment" spellcheck="true">// 服务器地址</span><span class="token keyword">const</span> myColor <span class="token operator">=</span> <span class="token string">'#4baf32'</span>     <span class="token comment" spellcheck="true">// 我的坦克颜色</span><span class="token keyword">const</span> speed <span class="token operator">=</span> <span class="token number">8</span>         <span class="token comment" spellcheck="true">// 移动速度</span><span class="token keyword">const</span> maxWidth <span class="token operator">=</span> <span class="token number">1100</span>      <span class="token comment" spellcheck="true">// 随机生成坦克位置时最大 left</span><span class="token keyword">const</span> maxHeight <span class="token operator">=</span> <span class="token number">800</span>      <span class="token comment" spellcheck="true">// 随机生成坦克位置时最大 top</span><span class="token comment" spellcheck="true">// 随机生成我的坦克所在的位置</span>myPos <span class="token operator">=</span> <span class="token punctuation">{</span>    left<span class="token punctuation">:</span> <span class="token function">randomBetween</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> maxWidth<span class="token punctuation">)</span><span class="token punctuation">,</span>    top<span class="token punctuation">:</span> <span class="token function">randomBetween</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> maxHeight<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 绑定 上、下、左、右 四个键盘子的点击事件</span>window<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">38</span><span class="token punctuation">:</span>            <span class="token function">move</span><span class="token punctuation">(</span><span class="token string">'up'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">case</span> <span class="token number">40</span><span class="token punctuation">:</span>            <span class="token function">move</span><span class="token punctuation">(</span><span class="token string">'down'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">case</span> <span class="token number">37</span><span class="token punctuation">:</span>            <span class="token function">move</span><span class="token punctuation">(</span><span class="token string">'left'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">case</span> <span class="token number">39</span><span class="token punctuation">:</span>            <span class="token function">move</span><span class="token punctuation">(</span><span class="token string">'right'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 移动我的坦克</span><span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">'up'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 旋转</span>        my<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">'rotate(-90deg)'</span>        <span class="token comment" spellcheck="true">// 移动</span>        myPos<span class="token punctuation">.</span>top <span class="token operator">-</span><span class="token operator">=</span> speed        my<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> myPos<span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token string">'px'</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">'down'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        my<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">'rotate(90deg)'</span>        myPos<span class="token punctuation">.</span>top <span class="token operator">+</span><span class="token operator">=</span> speed        my<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> myPos<span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token string">'px'</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">'left'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        my<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">'rotate(180deg)'</span>        myPos<span class="token punctuation">.</span>left <span class="token operator">-</span><span class="token operator">=</span> speed        my<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> myPos<span class="token punctuation">.</span>left <span class="token operator">+</span> <span class="token string">'px'</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">'right'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        my<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">'rotate(0deg)'</span>        myPos<span class="token punctuation">.</span>left <span class="token operator">+</span><span class="token operator">=</span> speed        my<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> myPos<span class="token punctuation">.</span>left <span class="token operator">+</span> <span class="token string">'px'</span>    <span class="token punctuation">}</span>    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>myPos<span class="token punctuation">.</span>left<span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>myPos<span class="token punctuation">.</span>top<span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>my<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 向页面中添加一个坦克</span><span class="token keyword">function</span> <span class="token function">addTank</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>top<span class="token punctuation">,</span>transform<span class="token punctuation">)</span> <span class="token punctuation">{</span>    transform <span class="token operator">=</span> transform <span class="token operator">||</span> <span class="token string">'rotate(0deg)'</span>    <span class="token keyword">let</span> tank <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    tank<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'tank'</span>    tank<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">'px'</span>    tank<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token string">'px'</span>    tank<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span>    allTanks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span>    <span class="token keyword">return</span> tank<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成一个随机数</span><span class="token keyword">function</span> <span class="token function">randomBetween</span><span class="token punctuation">(</span>Min<span class="token punctuation">,</span>Max<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> Range <span class="token operator">=</span> Max <span class="token operator">-</span> Min<span class="token punctuation">;</span>    <span class="token keyword">var</span> Rand <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> Min <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Rand <span class="token operator">*</span> Range<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//四舍五入</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成我的坦克</span>my <span class="token operator">=</span> <span class="token function">addTank</span><span class="token punctuation">(</span>myPos<span class="token punctuation">.</span>left<span class="token punctuation">,</span> myPos<span class="token punctuation">.</span>top<span class="token punctuation">)</span>my<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> myColor<span class="token comment" spellcheck="true">// 连接服务器</span>ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://'</span><span class="token operator">+</span>host<span class="token operator">+</span><span class="token string">'?left='</span><span class="token operator">+</span>myPos<span class="token punctuation">.</span>left<span class="token operator">+</span><span class="token string">'&amp;top='</span><span class="token operator">+</span>myPos<span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 接收并处理服务器的消息</span>ws<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>type<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当消息类型为添加时，就向页面添加一个新坦克</span>        <span class="token keyword">case</span> <span class="token string">'add'</span><span class="token punctuation">:</span>            allTanks<span class="token punctuation">[</span>data<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">addTank</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>left<span class="token punctuation">,</span> data<span class="token punctuation">.</span>top<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token comment" spellcheck="true">// 当消息类型为移动时，就移动坦克（通过 id 区分坦克）</span>        <span class="token keyword">case</span> <span class="token string">'move'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>allTanks<span class="token punctuation">[</span>data<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">!=</span>undefined<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                allTanks<span class="token punctuation">[</span>data<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> data<span class="token punctuation">.</span>left <span class="token operator">+</span> <span class="token string">'px'</span>                allTanks<span class="token punctuation">[</span>data<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> data<span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token string">'px'</span>                allTanks<span class="token punctuation">[</span>data<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> data<span class="token punctuation">.</span>transform            <span class="token punctuation">}</span>            <span class="token keyword">break</span>        <span class="token comment" spellcheck="true">// 当收到删除的消息时，就删除这个坦克（通过 id 区分坦克）</span>        <span class="token keyword">case</span> <span class="token string">'remove'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>allTanks<span class="token punctuation">[</span>data<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">!=</span>undefined<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>allTanks<span class="token punctuation">[</span>data<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>                allTanks<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span>        <span class="token comment" spellcheck="true">// 当收到所有坦克的消息时，就在页面中添加所有的坦克</span>        <span class="token keyword">case</span> <span class="token string">'all'</span><span class="token punctuation">:</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>tanks<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                allTanks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">addTank</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>tanks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>tanks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>tanks<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> workerman </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GET和POST两种基本请求方法的区别</title>
      <link href="/2018/12/27/get-he-post-liang-chong-ji-ben-qing-qiu-fang-fa-de-qu-bie/"/>
      <url>/2018/12/27/get-he-post-liang-chong-ji-ben-qing-qiu-fang-fa-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>GET和POST是HTTP请求的两种基本方法，要说它们的区别，接触过WEB开发的人都能说出一二。</p><p>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。</p><p>你可能自己写过无数个GET和POST请求，或者已经看过很多权威网站总结出的他们的区别，你非常清楚知道什么时候该用什么。</p><p>当你在面试中被问到这个问题，你的内心充满了自信和喜悦。</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLcm8TfMjvKvXwbzXTbpUaahYNVFpXh8fIMgqcmbIeEBqFTt7ibiaewMicg/640?wx_fmt=png" alt="img"></p><p>你轻轻松松的给出了一个“标准答案”：</p><ul><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li></ul><ul><li>GET产生的URL地址可以被Bookmark，而POST不可以。</li></ul><ul><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li></ul><ul><li>GET请求只能进行url编码，而POST支持多种编码方式。</li></ul><ul><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li></ul><ul><li>GET请求在URL中传送的参数是有长度限制的，而POST么有。</li></ul><ul><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li></ul><ul><li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li></ul><ul><li>GET参数通过URL传递，POST放在Request body中。</li></ul><p>（本标准答案参考自w3schools）</p><p>“很遗憾，这不是我们要的回答！”</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLkCV5yUI4QFlaibOg9aFp2ZjPlaeAgaibbYyzOYsmcDfPlzFPAdcy21dQ/640?wx_fmt=jpeg" alt="img"></p><p>请告诉我真相。。。</p><p>如果我告诉你GET和POST本质上没有区别你信吗？ </p><p>让我们扒下GET和POST的外衣，坦诚相见吧！</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLVXZkPZibSibtVZoIkDcBTQJ3mFibpNtqOSNTLDs01s2rmB6PyCoibjczxQ/640?wx_fmt=png" alt="img"></p><p>GET和POST是什么？HTTP协议中的两种发送请求的方法。</p><p>HTTP是什么？HTTP是基于TCP/IP的关于数据如何在万维网中如何通信的协议。</p><p>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。 </p><p>那么，“标准答案”里的那些区别是怎么回事？</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLdhmQxXtz2Kwn3yzT8Jzic1joUsjXxeaU8JwerDiabz9N9sYmBpIgWic2A/640?wx_fmt=jpeg" alt="img"></p><p>在我大万维网世界中，TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签（设置method为GET），而且要求把传送的数据放在车顶上（url中）以方便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。</p><p>但是，我们只看到HTTP对GET和POST参数的传送渠道（url还是requrest body）提出了要求。“标准答案”里关于参数大小的限制又是从哪来的呢？</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLSDX3EiadGp0gDsHwgvGictCwWSEaAQ4jVib1sLaqnBGpFAUhHhjv8xGKQ/640?wx_fmt=jpeg" alt="img"></p><p>在我大万维网世界中，还有另一个重要的角色：运输公司。不同的浏览器（发起http请求）和服务器（接受http请求）就是不同的运输公司。 虽然理论上，你可以在车顶上无限的堆货物（url中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。业界不成文的规定是，（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。超过的部分，恕不处理。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到哦。</p><p>好了，现在你知道，GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。 </p><p>你以为本文就这么结束了？</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLNqLBKzbCAfuLHkM355iaBC9FuOlWrtiaIUmD95T8ReVJ9FInZIZWV0YA/0?" alt="img"></p><p>我们的大BOSS还等着出场呢。。。</p><p>这位BOSS有多神秘？当你试图在网上找“GET和POST的区别”的时候，那些你会看到的搜索结果里，从没有提到他。他究竟是什么呢。。。</p><p>GET和POST还有一个重大区别，简单的说：</p><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>长的说：</p><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</p><p>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><p>也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。</p><p>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p><p>\1. GET与POST都有自己的语义，不能随便混用。</p><p>\2. 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</p><p>\3. 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</p><p>现在，当面试官再问你“GET与POST的区别”的时候，你的内心是不是这样的？</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLyfrfWEnMQlicIoNbaQJCicpKjOVQp8tNjU9Zp8Eia40om3vTah9aZEF7w/640?wx_fmt=jpeg" alt="img"></p><p>结束！！！</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript高级题</title>
      <link href="/2018/12/25/javascript-mian-shi-ti/"/>
      <url>/2018/12/25/javascript-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript高级题"><a href="#JavaScript高级题" class="headerlink" title="JavaScript高级题"></a>JavaScript高级题</h1><h2 id="1-Java和JavaScript是什么关系？"><a href="#1-Java和JavaScript是什么关系？" class="headerlink" title="1.Java和JavaScript是什么关系？"></a>1.Java和JavaScript是什么关系？</h2><p>就像雷锋和雷霆塔的关系一样。</p><p>一般认为，当时 Netscape 之所以将 LiveScript 命名为 JavaScript，是因为 Java 是当时最流行的编程语言，带有 “Java” 的名字有助于这门新生语言的传播。</p><h2 id="2-ES6听说过吗？和JavaScript是什么关系？ES2015听说过吗？都是什么关系？"><a href="#2-ES6听说过吗？和JavaScript是什么关系？ES2015听说过吗？都是什么关系？" class="headerlink" title="2.ES6听说过吗？和JavaScript是什么关系？ES2015听说过吗？都是什么关系？"></a>2.ES6听说过吗？和JavaScript是什么关系？ES2015听说过吗？都是什么关系？</h2><p>CMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现（另外的ECMAScript方言还有Jscript和ActionScript）。日常场合，这两个词是可以互换的。</p><p>ES6既是一个历史名词，也是一个泛指，含义是5.1版以后的JavaScript的下一代标准</p><h2 id="3-如何把变量转成数字？转成布尔？转成字符串？"><a href="#3-如何把变量转成数字？转成布尔？转成字符串？" class="headerlink" title="3.如何把变量转成数字？转成布尔？转成字符串？"></a>3.如何把变量转成数字？转成布尔？转成字符串？</h2><h3 id="转数字"><a href="#转数字" class="headerlink" title="转数字:"></a>转数字:</h3><p>​    parseInt: 如果前几个字符可以是数字可以转成数字</p><p>​    Number:将整体转成数字( 例:123abc 不能转)</p><h3 id="转字符串"><a href="#转字符串" class="headerlink" title="转字符串:"></a>转字符串:</h3><p>​    value.toString()</p><p>​    “”+value</p><p>​    String(value)</p><h2 id="4-var-和-let-是干什么用的？什么区别？"><a href="#4-var-和-let-是干什么用的？什么区别？" class="headerlink" title="4.var 和 let 是干什么用的？什么区别？"></a>4.var 和 let 是干什么用的？什么区别？</h2><h3 id="var"><a href="#var" class="headerlink" title="var:"></a>var:</h3><p>​    可以定义 局部变量和 全局变量</p><p>​    如果在函数中定义变量时没有写 var 或者 let 那么变量将会变成全局变量</p><h3 id="let"><a href="#let" class="headerlink" title="let:"></a>let:</h3><p>​    可以定义 块级变量 、局部变量、和全局变量</p><p>​    let 可以定义块级变量</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>let : 变量只能声明一次</li><li>var : 变量可以多次声明</li></ul><h2 id="5-在一个函数中，如果定义变量时没有添加-var-会出现什么情况？"><a href="#5-在一个函数中，如果定义变量时没有添加-var-会出现什么情况？" class="headerlink" title="5.在一个函数中，如果定义变量时没有添加 var 会出现什么情况？"></a>5.在一个函数中，如果定义变量时没有添加 var 会出现什么情况？</h2><p>有的话应用于作用域,没有的话默认为全局变量</p><h2 id="6-什么是内存泄漏？"><a href="#6-什么是内存泄漏？" class="headerlink" title="6.什么是内存泄漏？"></a>6.什么是内存泄漏？</h2><p><img src="\medias\assets\image-20181224145842521-5634722.png" alt=""></p><h2 id="7-什么是块级作用域？"><a href="#7-什么是块级作用域？" class="headerlink" title="7.什么是块级作用域？"></a>7.什么是块级作用域？</h2><p>JS中作用域有：全局作用域、函数作用域。没有块作用域的概念。ECMAScript 6(简称ES6)中新增了块级作用域。<br>块作用域由 { } 包括，if语句和for语句里面的{ }也属于块作用域。</p><h2 id="8-什么是运算符短路？有什么用？"><a href="#8-什么是运算符短路？有什么用？" class="headerlink" title="8.什么是运算符短路？有什么用？"></a>8.什么是运算符短路？有什么用？</h2><p>我们可以使用 <code>&amp;&amp;</code> 和 <code>||</code> 实现短路操作。</p><p>&amp;&amp; ： 连接多个语句，当语句1为真是执行语句2.</p><p>||：连接多个语句，当语句1为假时执行语句2.</p><p>可以用短路运算符来实现一些简写，比如，有时我们获取到一个变量，不知道它的值是什么，但我们希望无论如何它都是一个数字，至少是个0，我们就可以写：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 如果 a 是假就得到0</span><span class="token keyword">var</span> a <span class="token operator">=</span> a <span class="token operator">||</span> <span class="token number">0</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 如果 o 存在就调用 o.name</span>o <span class="token operator">&amp;&amp;</span> o<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="9-说出JS中你用过的数据类型？"><a href="#9-说出JS中你用过的数据类型？" class="headerlink" title="9.说出JS中你用过的数据类型？"></a>9.说出JS中你用过的数据类型？</h2><p><img src="\medias\assets\image-20181224142341838-5632621.png" alt=""></p><h2 id="10-常用的循环"><a href="#10-常用的循环" class="headerlink" title="10.常用的循环"></a>10.常用的循环</h2><p><img src="\medias\assets\image-20181224151220870-5635540.png" alt=""></p><h2 id="11-arguments的用途"><a href="#11-arguments的用途" class="headerlink" title="11.arguments的用途"></a>11.arguments的用途</h2><p>在函数中可以使用 <code>arguments</code> 获取函数在调用时的参数数组。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arguments<span class="token punctuation">.</span>length <span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 2 , 获取参数的数量</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// tom ,第一个参数值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// jack ,第二个参数值</span><span class="token punctuation">}</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token string">'jack'</span><span class="token punctuation">)</span></code></pre><h2 id="12-什么是匿名函数？应用场景？"><a href="#12-什么是匿名函数？应用场景？" class="headerlink" title="12.什么是匿名函数？应用场景？"></a>12.什么是匿名函数？应用场景？</h2><p>匿名函数可以用来隔绝一段作用域。</p><p>有时我们需要在一个现有的项目中添加新的代码，这时当我们添加变量、函数时就有可能出现和原来系统中变量名、函数名冲突的情况，为了避免我们的代码和原代码中出现命名冲突的情况，我们就可以把我们的代码放到一个匿名函数中，然后调用这个匿名函数，这样我们所写的代码都只在这个匿名函数内生效，就不会影响其它代码了。</p><p>有两种写法，来调用匿名函数得到一段独立的作用域：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里的代码不影响外面的作用域</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里的代码不影响外面的作用域</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用微信支付接口的方法</title>
      <link href="/2018/12/19/wei-xin-zhi-fu/"/>
      <url>/2018/12/19/wei-xin-zhi-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h1><p><img src="/medias/assets/image-20180828171032250.png" alt="image-20180828171032250"></p><blockquote><p>微信支付的开发需要有一个微信公众号并且开通了微信支付才能正常进行，申请微信支付需要有公司资质。对于手上没有支付商户号的同学，可以下载测试账号体验基本的支付功能。</p></blockquote><h2 id="测试账号"><a href="#测试账号" class="headerlink" title="测试账号"></a>测试账号</h2><p>首先，我们需要访问 <a href="https://pay.weixin.qq.com/wiki/doc/api/index.html" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/index.html</a> 官方文档。选择扫码支付</p><p><img src="/medias/assets/image-20180906202433628.png" alt="image-20180906202433628"></p><p>下载 PHP 的SDK</p><p><img src="/medias/assets/image-20180906202502148.png" alt="image-20180906202502148"></p><p>解压缩文件并从 <code>WxPay.Config.php</code> 文件中找出 <code>app_id</code>、<code>mch_id</code> 和 <code>key</code> 三个测试账号：</p><p><img src="/medias/assets/image-20180906202651575.png" alt="image-20180906202651575"></p><p>支付时测试账号：</p><pre><code>&#39;app_id&#39; =&gt; &#39;wx426b3015555a46be&#39;,&#39;mch_id&#39; =&gt; &#39;1900009851&#39;,&#39;key&#39; =&gt; &#39;8934e7d15453e97507ef794cf7b0519d&#39;,</code></pre><h2 id="微信扫码支付流程"><a href="#微信扫码支付流程" class="headerlink" title="微信扫码支付流程"></a>微信扫码支付流程</h2><p>微信扫码支付流程：</p><p><img src="/medias/assets/image-20180906215125235.png" alt="image-20180906215125235"></p><h2 id="发起支付"><a href="#发起支付" class="headerlink" title="发起支付"></a>发起支付</h2><p>我们定义一个微信支付控制器并添加两个方法：</p><ul><li>pay：发起支付</li><li>notify：接收通知</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">controllers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Yansongda<span class="token punctuation">\</span>Pay<span class="token punctuation">\</span>Pay</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">WxpayController</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'app_id'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'wx426b3015555a46be'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 公众号 APPID</span>        <span class="token string">'mch_id'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'1900009851'</span><span class="token punctuation">,</span>        <span class="token string">'key'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'8934e7d15453e97507ef794cf7b0519d'</span><span class="token punctuation">,</span>        <span class="token string">'notify_url'</span> <span class="token operator">=</span><span class="token operator">></span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//requestbin.fullcontact.com/r6s2a1r6',</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'out_trade_no'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'total_fee'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// **单位：分**</span>            <span class="token string">'body'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'test body - 测试'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 'openid' => 'onkVf1FjWS5SBIixxxxxxx',</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$pay</span> <span class="token operator">=</span> Pay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">wechat</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$pay</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">return_code</span> <span class="token punctuation">,</span> <span class="token string">'&lt;hr>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$pay</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">return_msg</span> <span class="token punctuation">,</span> <span class="token string">'&lt;hr>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$pay</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">appid</span> <span class="token punctuation">,</span> <span class="token string">'&lt;hr>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$pay</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">result_code</span> <span class="token punctuation">,</span> <span class="token string">'&lt;hr>'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$pay</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">code_url</span> <span class="token punctuation">,</span> <span class="token string">'&lt;hr>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$pay</span> <span class="token operator">=</span> Pay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">wechat</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$pay</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是的，验签就这么简单！</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">result_code</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">return_code</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">'共支付了：'</span><span class="token punctuation">.</span><span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">total_fee</span><span class="token punctuation">.</span><span class="token string">'分'</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string">'订单ID：'</span><span class="token punctuation">.</span><span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">out_trade_no</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$pay</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>访问 wxpay/pay 方法发起支付，成功之后，微信服务器会返回支付码：</p><p><img src="/medias/assets/image-20180906215323987.png" alt="image-20180906215323987"></p><p>我们可以使用支付码生成二维码，我们可以先使用一个网站来生成：</p><p><img src="/medias/assets/image-20180911120201240.png" alt="image-20180911120201240"></p><p>现在使用手机扫码即可实现微信支付。</p><p><strong>注意：支付时使用的是真的钱！！！！！所以，测试时请使用1分！！！</strong></p><h2 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h2><p>拿到支付码之后，我们需要把支付码转成二维码图片。</p><p>1、安装扩展</p><pre><code>composer require endroid/qr-code</code></pre><p>2、生成二维码</p><pre class=" language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Endroid<span class="token punctuation">\</span>QrCode<span class="token punctuation">\</span>QrCode</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">qrcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$qrCode</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QrCode</span><span class="token punctuation">(</span>'weixin<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//wxpay/bizpayurl?pr=hpVOrJ1');</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: '</span><span class="token punctuation">.</span><span class="token variable">$qrCode</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$qrCode</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="通知的调试"><a href="#通知的调试" class="headerlink" title="通知的调试"></a>通知的调试</h2><p>因为发送的通知都是在后台进行的，所以我们看不到任何的输出结果，这不便于我们对代码进行调试。</p><p>在这种情况下，为了调试，我们可以将要打印的信息写到日志文件中，然后通过日志文件来查看打印的信息。</p><pre class=" language-php"><code class="language-php"><span class="token variable">$log</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>libs<span class="token punctuation">\</span>Log</span><span class="token punctuation">(</span><span class="token string">'wxpay.log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$log</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input'));</span></code></pre><p>代码说明：</p><ul><li><code>file_get_contents(&#39;php://input&#39;)</code> ： 可以用来接收原始数据。当我们接收的数据是 <code>XML</code> 或者 <code>JSON</code> 等非正常表单中的数据时，我们需要使用这种方式才能接收到数据。</li></ul><p>示例、使用日志记录接收到的通知：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$log</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>libs<span class="token punctuation">\</span>Log</span><span class="token punctuation">(</span><span class="token string">'wxpay'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录日志</span>    <span class="token variable">$log</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接收到微信的消息'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pay</span> <span class="token operator">=</span> Pay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">wechat</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$pay</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是的，验签就这么简单！</span>        <span class="token comment" spellcheck="true">// 记录日志</span>        <span class="token variable">$log</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'验证成功，接收的数据是：'</span> <span class="token punctuation">.</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input'));</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">result_code</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">return_code</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 记录日志</span>            <span class="token variable">$log</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'支付成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 更新订单状态</span>            <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>models<span class="token punctuation">\</span>Order</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取订单信息</span>            <span class="token variable">$orderInfo</span> <span class="token operator">=</span> <span class="token variable">$order</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">findBySn</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">out_trade_no</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$orderInfo</span><span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 开启事务</span>                <span class="token variable">$order</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startTrans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置订单为已支付状态</span>                <span class="token variable">$ret1</span> <span class="token operator">=</span> <span class="token variable">$order</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setPaid</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">out_trade_no</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 更新用户余额</span>                <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>models<span class="token punctuation">\</span>User</span><span class="token punctuation">;</span>                <span class="token variable">$ret2</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token variable">$orderInfo</span><span class="token punctuation">[</span><span class="token string">'money'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$orderInfo</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ret1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$ret2</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 提交事务</span>                    <span class="token variable">$order</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 回事事务</span>                    <span class="token variable">$order</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 记录日志</span>        <span class="token variable">$log</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'验证失败！'</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$pay</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>支付成功之后，我们可以查看日志文件中的内容进行调试：</p><p><img src="/medias/assets/image-20180912100106044.png" alt="image-20180912100106044"></p><p>测试成功之后就可以注释掉记录日志的代码了。</p><p><strong>扩展：接收原始数据</strong></p><p>平时我们使用的 <code>$_POST</code> 和 <code>$_GET</code> 接收的数据都是经过PHP处理过的数据，但是 PHP 无法自动处理 XML 和 JSON  这些格式的数据，所以会导致使用 <code>$_GET</code> 和 <code>$_POST</code> 无法接收这种数据。</p><p>要接收 <code>XML</code> 和 <code>JSON</code> 格式的数据需要使用 <code>php://input</code> 。</p><p>示例：接收未经处理的原始数据</p><pre class=" language-php"><code class="language-php"><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input');       // 接收原始的数据</span></code></pre><h2 id="检查支付状态"><a href="#检查支付状态" class="headerlink" title="检查支付状态"></a>检查支付状态</h2><p>我们希望在微信支付成功之后，网页就知道已经支付成功了，然后自动关闭页面。</p><p>难点：网站使用的HTTP协议，这种协议不能实现服务器主动向浏览器发数据的功能。</p><p><img src="/medias/assets/image-20180912085423998.png" alt="image-20180912085423998"></p><p>实现服务器推送数据到浏览器的方案：</p><p>1、客户端定期（每1秒）向服务器发送 AJAX 获取订单的状态 （实现简单、效果最差）</p><p>2、轮询+长连接（减少发送的频繁，让服务器多停留一会儿，占用服务器资源，阻塞进程）</p><p>3、comet 推送服务器（需要搭建服务器，性能很好）</p><p>4、用第三方的推送服务</p><p>5、websocket协议 （基于HTTP协议之上，可以长久连接的协议，并且可以双向推送数据，适合开发网页游戏、聊天室之类实时双向通信的程序）（旧的浏览器不支持、搭建websock 服务器）</p><p><strong>使用轮询实现推送</strong></p><p>接下来我们使用每秒执行 1 次 AJAX 的方案来查询订单状态，并在检测到订单已支付成功时关闭页面。</p><p>首先，我们使用一个页面来显示二维码图片。</p><p>1、创建 qrcode 控制器用来生成二维码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">controllers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Endroid<span class="token punctuation">\</span>QrCode<span class="token punctuation">\</span>QrCode</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">QrcodeController</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把一个字符串生成 二维码图片并显示</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">qrcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$qrCode</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QrCode</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: '</span><span class="token punctuation">.</span><span class="token variable">$qrCode</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$qrCode</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、创建支付视图</p><p>views/users/wxpay.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>扫码完成支付<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    &lt;img src="/qrcode/qrcode?code=<span class="token prolog">&lt;?=$code?></span>"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/simditor-2.3.6/scripts/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>var sn = "<span class="token prolog">&lt;?=$sn?></span>";function check(){    $.ajax({        type:"GET",        url:"/user/orderStatus?sn="+sn,        success:function(data)        {            if(data == 1)            {                alert("支付成功！");                // 关闭页面                window.close();            }            else            {                // 1秒之后执行一次                setTimeout(check, 1000);            }        }    }); }// 1秒之后执行一次setTimeout(check, 1000);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>3、在支付时显示支付视图</p><p>WxpayController.php</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 调用微信接口进行支付</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接收订单编号</span>    <span class="token variable">$sn</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'sn'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取出订单信息</span>    <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>models<span class="token punctuation">\</span>Order</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据订单编号取出订单信息</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$order</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">findBySn</span><span class="token punctuation">(</span><span class="token variable">$sn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用微信接口</span>        <span class="token variable">$ret</span> <span class="token operator">=</span> Pay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">wechat</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token string">'out_trade_no'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'sn'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'total_fee'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'money'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 单位：分</span>            <span class="token string">'body'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'智聊系统用户充值 ：'</span><span class="token punctuation">.</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'money'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">'元'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">return_code</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$ret</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">result_code</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 加载视图,并把支付码的字符串发到页面中</span>            <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'users.wxpay'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>                <span class="token string">'code'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$ret</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">code_url</span><span class="token punctuation">,</span>                <span class="token string">'sn'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$sn</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'订单状态不允许支付~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、服务器提供一个查询订单状态的接口</p><p>UserController.php</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">orderStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$sn</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'sn'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$model</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">;</span>    <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token variable">$model</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">findBySn</span><span class="token punctuation">(</span><span class="token variable">$sn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>添加使用长连接</strong> </p><p>由于每秒执行 AJAX ，连接的频繁太快，所以我们可以在服务器端添加些代码，让服务器延迟返回数据，保持长连接，以减少AJAX连接的频繁。</p><p>修改查询订单的接口：</p><p>controllers/UserController.php</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">orderStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$sn</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'sn'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取的次数</span>    <span class="token variable">$try</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$model</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 查询订单信息</span>        <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token variable">$model</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">findBySn</span><span class="token punctuation">(</span><span class="token variable">$sn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果订单未支付就等待1秒，并减少尝试的次数，如果已经支付就退出循环</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$try</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$try</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果尝试的次数到达指定的次数就退出循环</span>    <span class="token keyword">echo</span> <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 支付接口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常问的PHP面试题</title>
      <link href="/2018/12/19/php-mian-shi-ti/"/>
      <url>/2018/12/19/php-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP经典-面试题"><a href="#PHP经典-面试题" class="headerlink" title="PHP经典 面试题"></a>PHP经典 面试题</h1><h2 id="夯实"><a href="#夯实" class="headerlink" title="夯实"></a>夯实</h2><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h2 id="谈谈对面向对象的理解"><a href="#谈谈对面向对象的理解" class="headerlink" title="谈谈对面向对象的理解"></a>谈谈对面向对象的理解</h2><p>面向对象简称OOP，对象就是人对各种具体事物抽象之后的概念。人们每天都在跟各种对象打交道，就比如:</p><p>一台电脑而对象有很多特性：内存，宽度，颜色…这些就是属性，<br>而对象还有很多功能：听歌，看视频，打电话…这些就是方法，可以看成是一个函数<br>但是对象不是独立的，还有继承性。在编程的过程中，我们可以把所有问题都看成是一个对象，<br>但对象实际上就是一组数据的集合，并且都已经被命名，这些数据的根据就是对象的属性，可以被访问。<br>但是如果要访问一个外部的对象我们就必须要先将它引进来。</p><h2 id="http协议状态码"><a href="#http协议状态码" class="headerlink" title="http协议状态码"></a>http协议状态码</h2><ul><li>100-199 消息系列。</li><li>200-299 成功系列。</li><li>300-399 重定向系列。</li><li>400-499 请求错误系列。</li><li>500-599 服务器端错误系列。</li></ul><h2 id="谈谈你对-PHP-命名空间的理解"><a href="#谈谈你对-PHP-命名空间的理解" class="headerlink" title="谈谈你对 PHP 命名空间的理解"></a>谈谈你对 PHP 命名空间的理解</h2><p>命名空间是一种封装事物的抽象方法，定义的空间是虚拟的，不是真实存在的。主要是用来解决类、函数、常量名字的冲突问题。</p><h2 id="请谈谈您对-MVC-的理解？"><a href="#请谈谈您对-MVC-的理解？" class="headerlink" title="请谈谈您对 MVC 的理解？"></a>请谈谈您对 MVC 的理解？</h2><p>MVC 是一个设计模式，它强制性的使应用程序的输入、处理和输出分开。</p><p>由模型(model),视图(view),控制器(controller) 完成的应用程序</p><p>视图是用户看到并与之交互的界面，模型表示企业数据和业务规则，控制器接受用户的输入并调用模型和视图去完成用户的需求。</p><h2 id="网站高并发，大流量访问的处理及解决方法"><a href="#网站高并发，大流量访问的处理及解决方法" class="headerlink" title="网站高并发，大流量访问的处理及解决方法"></a>网站高并发，大流量访问的处理及解决方法</h2><p><strong>网站优化：</strong></p><p>代码：  代码优化，</p><p><strong>数据库的优化：</strong></p><p>​    表结构优化；SQL优化；冷热数据的优化；nosql；分表分库</p><p><strong>文件优化：</strong></p><p>文件打包压缩 ；CDN ；OSS  </p><p><strong>服务器优化：</strong></p><p>负载均衡；主从复制</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue-SPA</title>
      <link href="/2018/11/29/vue-spa/"/>
      <url>/2018/11/29/vue-spa/</url>
      
        <content type="html"><![CDATA[<h1 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h1><h2 id="什么是SPA？"><a href="#什么是SPA？" class="headerlink" title="什么是SPA？"></a>什么是SPA？</h2><p>SPA(Single Page Application)：单页面应用程序，是一种前端的开发技术，是现在前、后端分离下的一种产物。</p><ul><li>传统的网站</li></ul><p>​    我们传统的网站是由很 <code>多个独立的页面</code> 组成的，当我们点击页面中的 a 标签时，就会向服务器发送一个新的请求，然后下载另一个页面显示，跳转时是页面之间的跳转。</p><ul><li><p>SPA</p><p>SPA（单页面应用程序），顾名思议，整个网站中<code>只有一个页面</code>，在这个页面中会加载很多个不同的组件，当我们点击按钮时，并不会打开一个新的页面，而是还在当前的页面中<code>切换显示不同的组件</code>。</p></li></ul><h2 id="SPA-的优、缺点"><a href="#SPA-的优、缺点" class="headerlink" title="SPA 的优、缺点"></a>SPA 的优、缺点</h2><ul><li>优点</li></ul><p>1、减轻服务器的压力：一个网站只有一个页面，只需要从服务器加载一次</p><p>2、并且把大量操作都放到了浏览器中去完成</p><p>3、前、后端完成分离，使服务器只需要提供同一套 JSON 数据接口，就可以同时满足WEB端、桌面端、手机端等不同的前端设备</p><p>4、而且前端只关注前端、后端只操作数据，各司其职</p><ul><li>缺点</li></ul><p>1、首屏加载速度可能会很长</p><p>2、SEO（搜索引擎优化）不友好，爬虫数据时什么也抓不到</p><p>3、页面复杂度提高、开发难度加大</p><h2 id="使用-Vue-开发-SPA"><a href="#使用-Vue-开发-SPA" class="headerlink" title="使用 Vue 开发 SPA"></a>使用 Vue 开发 SPA</h2><p>我们可以使用 Vue 框架来开发 SPA，开发时使用的技术：</p><p>1、使用 <code>Vue Cli</code> 工具快速构建项目目录结构、开发环境、部署</p><p>2、使用 <code>Vue-Router</code> 实现路由，实现组件之间的切换</p><p>3、使用 <code>Vuex</code> 实现状态数据的管理</p><p>4、使用 <code>axios</code> 发送 AJAX 和服务器通信</p><h2 id="vue-文件"><a href="#vue-文件" class="headerlink" title=".vue 文件"></a>.vue 文件</h2><p>在使用 Vue 开发 SPA 时，SPA 是由很多个 Vue 的组件组成的，每个组件就是一个 <code>.vue</code> 文件。</p><p>每个 <code>.vue</code> 文件中都由三部分组件：HTML、CSS、JS，并且：</p><p>1、html：所有的 html 代码必须要写在 <code>&lt;template&gt;...&lt;/template&gt;</code> 标签中</p><p>2、css：所有的 css 代码写在 <code>style...&lt;style&gt;</code> 标签中</p><p>3、js：所有 js 代码写在 <code>&lt;script&gt;...&lt;/script&gt;</code> 标签中</p><h2 id="SPA-中的-Vue"><a href="#SPA-中的-Vue" class="headerlink" title="SPA 中的 Vue"></a>SPA 中的 Vue</h2><p>SPA 中的 Vue 和我们之前学习过的 Vue 的用法大体上是一致的，不过也有一些不一样的地方需要注意一下：</p><ul><li>data 必须是一个函数</li></ul><p>我们之前使用 vue 时，都是在 data 中定义数据，而 data 是一个属性类型，如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'tom'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在 spa 中，每个 .vue 文件是一个 Vue 的组件，在组件中 <code>data 必须是一个函数</code>，而且不能使用 new Vue 创建新的 Vue 对象，因为整个 SPA 中只有一个 Vue 对象：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'tom'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>使用 import 引入组件</li></ul><p>我们之前当要引入一个JS文件或者组件时需要使用 script 标签，如：</p><pre><code>&lt;script src=&#39;Pagination.js&#39;&gt;&lt;/script&gt;</code></pre><p>而在 spa 中需要使用 es6 提供的 import 来引入：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Pagination <span class="token keyword">from</span> <span class="token string">"Pagination.vue"</span></code></pre><h1 id="使用-Vue-CLI-构建项目"><a href="#使用-Vue-CLI-构建项目" class="headerlink" title="使用 Vue CLI 构建项目"></a>使用 Vue CLI 构建项目</h1><p>Vue 提供了一个 <code>Vue CLI</code> 的工具可以让我们快速的搭建起一个 SPA 的项目来。</p><h2 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/</a></p><p><img src="/medias/assets/image-20181117093433022-2418473.png" alt="image-20181117093433022"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先要确定自己的电脑上安装了 <code>Node.js</code> 8.9 或更高版本。</p><p>然后，我们就可以使用 npm 来安装 vue/cli ：</p><pre><code>npm install -g @vue/cli</code></pre><p>安装之后，我们可以在命令行中使用 vue 指令查看安装的版本：</p><pre><code>vue --version</code></pre><p><img src="/medias/assets/image-20181117093739940-2418659.png" alt="image-20181117093739940"></p><h2 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h2><p>我们可以使用下面的命令来创建一个 SPA 的项目：</p><pre><code>vue create 项目名称</code></pre><p>创建项目时，会提示我们选择项目中需要使用的组件，我们可以使用默认的配置，也可以自己手动选择需要加载的组件。</p><p>手动选择组件</p><p><img src="/medias/assets/image-20181117095607650-2419767.png" alt="image-20181117095607650"></p><p>勾选需要安装的组件：</p><p><img src="/medias/assets/image-20181117095700506-2419820.png" alt="image-20181117095700506"></p><p>使用路由的 history 模式：</p><p><img src="/medias/assets/image-20181117095724832-2419844.png" alt="image-20181117095724832"></p><p>把配置写到 package.json 文件中：</p><p><img src="/medias/assets/image-20181117095750342-2419870.png" alt="image-20181117095750342"></p><p>不保存本次的配置：</p><p><img src="/medias/assets/image-20181117095810003-2419890.png" alt="image-20181117095810003"></p><h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2><p>我们写的代码都在 src 目录中</p><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>安装成功之后，我们可以进行使用以下指令启动项目：</p><pre><code>cd hello-world   // 进入项目目录npm run server   // 启动项目</code></pre><p><img src="/medias/assets/image-20181117100041305-2420041.png" alt="image-20181117100041305"></p><p>启动之后我们可以在浏览器中访问欢迎页面：</p><p><img src="/medias/assets/image-20181117100106775-2420066.png" alt="image-20181117100106775"></p><h2 id="初始组件-App-vue"><a href="#初始组件-App-vue" class="headerlink" title="初始组件 App.vue"></a>初始组件 App.vue</h2><p>项目启动之后会最先运行 main.js 文件：</p><p>main.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// 装载 vue-router</span>  store<span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">// 装载 vuex</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 渲染 App 组件</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><p>在 main.js 文件中会</p><p>1、引入 vue 、vue-router、vux 框架包</p><p>2、引入 App 组件</p><p>3、创建 Vue 对象并且装载 vue-router , vux</p><p>4、渲染第一个组件：App.vue</p><p>所以我们运行之后看到的页面就是 App.vue 组件的内容。 </p><h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h1><p>在 SPA 中，网站内容的变换实际上的组件的切换，为了方便的实现组件间的切换，Vue 框架引入了 <code>vue-router</code> 的个工具来实现多个组件之间的切换。</p><p>官方文档：<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a></p><p><img src="/medias/assets/image-20181117161356170-2442436.png" alt="image-20181117161356170"></p><h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><p>在使用 vue-router 之前，我们需要先配置访问的路径与要显示的组件的对应关系。</p><p>我们需要在 <code>router.js</code> 文件中进行配置。</p><p><img src="/medias/assets/image-20181117161625914-2442585.png" alt="image-20181117161625914"></p><p>router.js</p><p>默认配置了两个路由:</p><p>1、当访问 / 时，显示 Home 组件</p><p>2、当访问 /about 时，显示 about 组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'./views/Home.vue'</span>   <span class="token comment" spellcheck="true">// 加载组件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 路由模式，history 和 hash 两种</span>  base<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">// 配置路由的数组</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 访问路径</span>      name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">// 路由名称</span>      component<span class="token punctuation">:</span> Home         <span class="token comment" spellcheck="true">// 对应的组件</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: "about" */</span> <span class="token string">'./views/About.vue'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>说明：</p><p>1、about 组件的写法是延迟加载：在访问 /about 路径时才会加载该组件，这样可以提高首屏显示速度</p><p>2、<code>/* webpackChunkName: &quot;about&quot; */</code> 的意思是将这个组件添加到 about 这个组中，当访问 about 这个组件时就会添加所有 about 这个组中的组件</p><h2 id="路由切换按钮"><a href="#路由切换按钮" class="headerlink" title="路由切换按钮"></a>路由切换按钮</h2><p>当我们定义好路由之后，我们就可以在页面中添加按钮跳转到相应的路由，有两种跳转方法：</p><p>1、在 HTML 中使用 <code>router-link</code> 标签（相当于a标签）</p><p>2、在 JS 中使用 <code>router-push</code> 实现跳转（相当于 location.href ）</p><h3 id="router-link-标签"><a href="#router-link-标签" class="headerlink" title="router-link 标签"></a>router-link 标签</h3><p>我们可以在页面中使用 <code>router-link</code> 标签来制作可以跳转的按钮（相当于 a 标签）：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> |  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>说明：to 属性用来指定点击按钮时要切换到的路由</p><p><img src="/medias/assets/image-20181117175229536-2448349.png" alt="image-20181117175229536"></p><h3 id="router-push"><a href="#router-push" class="headerlink" title="router.push"></a>router.push</h3><p>在 JS 中我们可以使用 <code>this.$router.push</code> 实现跳转。</p><pre class=" language-js"><code class="language-js"><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'登录成功'</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 跳转到 /</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="组件容器"><a href="#组件容器" class="headerlink" title="组件容器"></a>组件容器</h2><p>我们在使用 vue-router 时，除了要配置路由之后，最重要的是，我们还需要在页面中使用 <code>router-view</code> 标签来指定组件显示的位置：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> |      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 组件显示的容器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>这时所有的路由组件都会显示在 <code>router-view</code> 标签所在的位置上：</p><p>1、默认显示路由配置中的第一个路由，也就是 / 路由</p><p>2、当切换路由时，也是在这个标签的位置上切换路由</p><p>因为我们在 <code>router.js</code> 文件的路由是这样配置的：</p><pre class=" language-js"><code class="language-js">routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">// 配置路由的数组</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 访问路径</span>      name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">// 路由名称</span>      component<span class="token punctuation">:</span> Home         <span class="token comment" spellcheck="true">// 对应的组件</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: "about" */</span> <span class="token string">'./views/About.vue'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>第一个是 home 路由，所以默认显示的就是 Home 组件的内容：</p><p><img src="/medias/assets/image-20181117180842895-2449322.png" alt="image-20181117180842895"></p><h2 id="案例：添加一个页面"><a href="#案例：添加一个页面" class="headerlink" title="案例：添加一个页面"></a>案例：添加一个页面</h2><p>1、首先在 <code>views</code> 目录下创建 <code>Hello.vue</code> 组件</p><p>views/Hello.vue</p><pre class=" language-vue"><code class="language-vue"><template>    <div>        <input @click="sayHello" type="button" value="sayHello">    </div></template><style>body {    background-color: #eee;}</style><script>export default {    methods:{        sayHello(){            alert('Hello ~')        }    }}</script></code></pre><p>注意：HTML的代码必须要写在一个根标签中。</p><p>2、配置路由</p><p>在 <code>router.js</code> 文件中的 routes 数组中添加一个 hello 路由</p><p>router.js</p><pre class=" language-js"><code class="language-js">routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token operator">...</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/hello'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 路径</span>      name<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 名称</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./views/Hello.vue'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 加载的组件</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>3、添加切换按钮</p><p>在 <code>App.vue</code> 页面中添加跳转到 /hello 的按钮</p><p>App.vue</p><pre class=" language-vue"><code class="language-vue"><div id="nav">  <router-link to="/">Home</router-link> |  <router-link to="/about">About</router-link> |  <router-link to="/hello">hello</router-link></div></code></pre><p>添加之后保存，保存之后页面会自动刷新：</p><p><img src="/medias/assets/image-20181117181622305-2449782.png" alt="image-20181117181622305"></p><p>点击 hello 按钮，就会在 router-view 标签的位置上切换到 Hello 组件：</p><p><img src="/medias/assets/image-20181117181732185-2449852.png" alt="image-20181117181732185"></p><h2 id="页面组件与功能组件"><a href="#页面组件与功能组件" class="headerlink" title="页面组件与功能组件"></a>页面组件与功能组件</h2><p>组件分为两种：<code>页面组件</code> 和 <code>功能组件</code>。</p><ul><li>页面组件</li></ul><p>用来构建独立页面的组件，保存在 <code>views</code>  目录中，页面组件中可以包含多个功能组件。</p><ul><li>功能组件</li></ul><p>我们可以将页面中一些独立的小功能制作成组件，这些组件可以被页面组件引入使用，比如：翻页、时间插件等，功能组件保存在  <code>components</code>  目录中，这些组件不能独立显示，只能被包含在一个页面组件中使用。</p><p>页面组件和功能组件的关系：（每个页面就是一个页面组件，每个页面中可以包含多个功能组件）</p><p><img src="/medias/assets/image-20181117191120753-2453080.png" alt="image-20181117191120753"></p><h2 id="使用功能组件"><a href="#使用功能组件" class="headerlink" title="使用功能组件"></a>使用功能组件</h2><p>系统中默认有一个 <code>HelloWorld</code> 组件：</p><p><img src="/medias/assets/image-20181117190241610-2452561.png" alt="image-20181117190241610"></p><p>如果要在页面中使用这个组件需要先使用 <code>import</code> 引入该组件，然后在使用标签使用该组件。</p><p>修改 <code>Hello.vue</code> 页面：</p><p>views/Hello.vue</p><p><img src="/medias/assets/image-20181117190813376-2452893.png" alt="image-20181117190813376"></p><p>效果：</p><p><img src="/medias/assets/image-20181117190856751-2452936.png" alt="image-20181117190856751"></p><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><p>我们在定义路由时经常需要为路由添加一些参数，比如当点击一件商品进入商品详情页时需要把商品的ID传到页面中。</p><p>我们可以使用以下语法定义带参数的路由：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/hello/:id'</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./views/Hello.vue'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这时当我们访问 <code>/hello/1</code>  ,  <code>/hello/tom</code>   等路径时都会匹配 Hello 组件。</p><p>如果我们希望只匹配数字做为参数，这时可以使用正则表达式来限制匹配的类型：</p><p>id 参数必须是数字：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/hello/:id(\\d+)'</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./views/Hello.vue'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>在组件中可以使用 <code>this.$router.params</code> 来接收传过来的所有的参数。</p><p>比如在 Hello.vue 组件中可以这样接收 id 这个参数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 打印接收的 id 参数</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h2 id="meta-数据"><a href="#meta-数据" class="headerlink" title="meta 数据"></a>meta 数据</h2><p>我们在定义路由时，有时我们可能还需要设置一些与这个路由相关的额外的数据，这时我们不可以通过 <code>meta</code> 属性来定义。</p><p>比如，我们可以通过 meta 为每个路由对应的页面设置页面标题：</p><p>store.js</p><pre class=" language-js"><code class="language-js">routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Home<span class="token punctuation">,</span>      meta<span class="token punctuation">:</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'首页'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span>      meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span><span class="token string">'关于我们'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./views/About.vue'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/hello/:id(\\d+)'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>      meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span><span class="token string">'hello'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./views/Hello.vue'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>设置了 meta 数据之后，在每个组件中，我们就可以通过 <code>this.$route.meta</code> 来获取对应的 meta 数据。</p><p>在 Hello.vue、About.vue、Home.vue 中都添加初始设置 title 的代码：</p><pre class=" language-js"><code class="language-js"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>效果是在显示每个页面时都会用 meta 中设置的 title 来初始化页面标题：</p><p><img src="/medias/assets/image-20181118104002573-2508802.png" alt="image-20181118104002573"></p><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><p>导航守卫：指在每次路由将要发生变化时，都会被触发的一套钩子函数。</p><p>每当点击一个按钮或者在JS 中调用 this.$route.push 实现页面跳转时，首先要先执行导航守卫定义的函数，当函数中再次调用 next 函数时才可以跳转，否则不可以跳转：</p><p><img src="/medias/assets/image-20181118104639964-2509200.png" alt="image-20181118104639964"></p><p>我们可创建 VueRouter 时使用 <code>beforeEach</code> 定义全局守卫：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 为路由绑定一个每次跳转时触发的函数</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>全局守卫需要三个参数：</p><p>to：即将要进入的 <code>router 对象</code>（比如：从 Index.vue 跳转到 Home.vue ，to 指的就是 Home.vue）</p><p>from：当前正在离开的 <code>router 对象</code>（比如：从 Index.vue 跳转到 Home.vue ，to 指的就是 Index.vue）</p><p>next：是一个<code>函数</code>，在守卫中的最后必须要调用这个函数，调用时分为以下几个情况：</p><ul><li>next()：通过，进入下一个环节</li><li>next(false)：中断当前的导航（不允许跳转）。</li><li>next(‘/‘)：跳转到一个指定的地址（这里是 / ，也可以是其它路径）。</li></ul><p>我们是在 main.js 文件中引入的 router ,所以，我们可以在 main.js 中定义全局守卫：</p><p>main.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><p>全局守卫在项目中应用非常广泛，比如，有些页面是必须登录才可以访问的，我们就可以使用全局守卫来实现。</p><h2 id="示例：登录的验证"><a href="#示例：登录的验证" class="headerlink" title="示例：登录的验证"></a>示例：登录的验证</h2><p>1、在定义路由时使用 meta 来设置一个路由是否必须登录才能访问</p><p>router.js  中定义在 meta 中添加 isLogin ，表示必须登录才能访问</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span>  meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token string">'关于我们'</span><span class="token punctuation">,</span>    isLogin<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./views/About.vue'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>2、定义全局守卫</p><p>main.js 中添加全局守卫：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果将要进入的跳转必须登录，那么就先判断用户有没有登录</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isLogin<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>有时一个页面中可能还会嵌套子页面，比如在 hello 页面中，可能还会有 hello tom  和 hello jack 两个子页面，这时我们就可以通过在定义路由时使用 <code>children</code> 数组来定义嵌套路由。</p><p>router.js</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/hello'</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>  meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token string">'hello'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./views/Hello.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// /hello/tom</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"tom"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"hello-tom"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./views/HelloTom.vue'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// /hello/jack</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"hello-jack"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./views/HelloJack.vue'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>然后在 Hello.vue 页在中再添加两个按钮和一个 router-view 设置子页面的位置：</p><p>views/Hello.vue</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello/tom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello Tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> |<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello/jack<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello Jac<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span></code></pre><p>效果：当点击 Hello Tom 和 Hello Jack 按钮时，会切换嵌套组件</p><p><img src="/medias/assets/image-20181118115827326-2513507.png" alt="image-20181118115827326"></p><p>嵌套组件关系图：</p><p><img src="/medias/assets/image-20181118120205288-2513725.png" alt="image-20181118120205288"></p><p>#Vuex</p><h2 id="什么是-Vuex？"><a href="#什么是-Vuex？" class="headerlink" title="什么是 Vuex？"></a>什么是 Vuex？</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。</p><p>Vue 是由数据驱动的，也就是说每个组件的状态都是由数据决定的，比如一个元素的显示与隐藏就是它的两种状态，这两种状态在 vue 中都会由一个数据来管理。</p><p>比如，下面的 img 标签的显示与隐藏由 isShow 这个数据决定，当 isShow 为 true 时显示，为 false 时隐藏：</p><pre><code>&lt;template&gt;    &lt;div&gt;        &lt;img v-if=&quot;isShow&quot; src=&quot;../assets/logo.png&quot;&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data(){    return {      isShow: true    }  },  ...}&lt;/script&gt;</code></pre><p>也就是说现在这个元素的状态由 isShow 这个数据来决定。</p><p>在实际工作中，我们有时会遇到这样一种情况：我们需要在一个组件中操作另一个组件中元素的状态，比如我们需要在 b.vue 这个组件中设置 a.vue 中元素的显示状态，但 vue 是不允许跨文件操作数据的：</p><p><img src="/medias/assets/image-20181118121712159-2514632.png" alt="image-20181118121712159"></p><p>这时，我们就可以把需要同时被多个组件操作的数据提取出来，由 <code>状态管理器</code> 统一进行管理，在这种模式下，所以的组件都可以操作由 <code>状态管理器</code> 统一管理的数据：</p><p><img src="/medias/assets/image-20181118122039549-2514839.png" alt="image-20181118122039549"></p><p>有了状态管理器，我们就可以在所有组件中管理 a.vue 中图片的显示状态。</p><p>总结：Vuex（状态管理器），就是可以把需要多个组件同时管理的数据管理起来，让所有组件可以共同操作以改变一个组件的状态 。</p><h2 id="使用-Vuex"><a href="#使用-Vuex" class="headerlink" title="使用 Vuex"></a>使用 Vuex</h2><h3 id="定义状态数据与方法"><a href="#定义状态数据与方法" class="headerlink" title="定义状态数据与方法"></a>定义状态数据与方法</h3><p>在使用 Vux 时，首先我们需要先定义状态数据和操作它的方法。 </p><p>使用 Vuex 时，最重要的两部分是：<code>state</code> 和 <code>mutation</code>。</p><ul><li><p>state：保存所有组件公共的数据。（数据部分）</p></li><li><p>mutation：保存操作公共数据的方法。（函数部分）</p></li></ul><p>在最开始构建项目时，如果在安装时勾选了 vuex 组件，那么就已经安装好了 vuex。</p><p>在 <code>store.js</code> 文件中定义 <code>state</code> 和 <code>mutation</code> ：</p><p><img src="/medias/assets/image-20181118122531875-2515131.png" alt="image-20181118122531875"></p><p>在 <code>store.js</code> 文件中定义 state（数据）和mutations（操作数据的函数）：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        isShow<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">changeShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isShow      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="使用状态数据"><a href="#使用状态数据" class="headerlink" title="使用状态数据"></a>使用状态数据</h3><p>在 store.js 文件中定义好状态数据之后，我们就可以在页面中使用 <code>$store.state.状态数据名称</code> 来读取状态数据的值了：</p><p>views/Home.vue</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$store.state.isShow<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Vue logo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Welcome to Your Vue.js App<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h3 id="调用mutation"><a href="#调用mutation" class="headerlink" title="调用mutation"></a>调用mutation</h3><p>当我们要修改状态数据时，我们可以使用 <code>this.$store.commit(&#39;方法名&#39;)</code> 来调用状态函数来修改状态数据：</p><p>views/Home.vue</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token operator">...</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token operator">...</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token comment" spellcheck="true">// 每5秒改变一次状态</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'changeShow'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="案例：登录、退出"><a href="#案例：登录、退出" class="headerlink" title="案例：登录、退出"></a>案例：登录、退出</h2><p>store.js 中定义登录、退出按钮的状态：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 要管理的公共的数据（数据）</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    isShow<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    isLogin<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 定义修改这个数据的方法（方法）</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">changeShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isShow    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 如果要设置参数，第一个参数必须是 state ，代表 state 对象</span>    <span class="token comment" spellcheck="true">//              第二个参数才是我们自定义的参数</span>    <span class="token function">setLogin</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> value    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>App.vue 中根据 isLogin 显示按钮：</p><pre class=" language-vue"><code class="language-vue"><template>  <div id="app">    <div id="nav">      <router-link to="/">Home</router-link> |      <router-link to="/about">About</router-link> |      <router-link to="/hello">Hello</router-link> |      <router-link to="/goods/23">商品页</router-link> |      <template v-if="$store.state.isLogin">        <input @click="logout" type="button" value="退出">      </template>      <template v-else>        <router-link to="/login">登录</router-link> |      </template>    </div>    <router-view/>  </div></template><script>export default {  created(){    if(localStorage.getItem('token'))      this.$store.commit('setLogin', true)  },  methods:{    logout(){      localStorage.removeItem('token')      this.$store.commit('setLogin', false)      console.log(   this.$store.state.isLogin )    }  }}</script><style>#app {  font-family: 'Avenir', Helvetica, Arial, sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  text-align: center;  color: #2c3e50;}#nav {  padding: 30px;}#nav a {  font-weight: bold;  color: #2c3e50;}#nav a.router-link-exact-active {  color: #42b983;}</style></code></pre><p>Login.vue 在登录成功时修改 isLogin 的值</p><pre class=" language-vue"><code class="language-vue"><template>    <div>        <input type="text" v-model="username">        <input type="password" v-model="password">        <input @click="login" type="button" value="登录">    </div></template><script>export default {    data(){        return {            username:'',            password:''        }    },    methods:{        login(){            if(this.username = 'abc' && this.password == 'abc')            {                localStorage.setItem('token', 'afdsa324#!#REfds~~')                // 修改登录状态                this.$store.commit('setLogin', true)                // 跳转到首页                this.$router.push('/')            }        }    }}</script></code></pre><p>效果：登录、退出时按钮状态发生变化：</p><p><img src="/medias/assets/image-20181119120150414-2600110.png" alt="image-20181119120150414"></p><h1 id="vue-axios"><a href="#vue-axios" class="headerlink" title="vue-axios"></a>vue-axios</h1><p>官方推荐我们在 vue 中使用 axios 发送 AJAX 的请求。</p><p>在开发 SPA 时，我们需要把 axios 集成进来，我们可以使用 <code>vue-axios</code> 这个包。</p><p>文档地址：<a href="https://www.npmjs.com/package/vue-axios" target="_blank" rel="noopener">https://www.npmjs.com/package/vue-axios</a></p><p><img src="/medias/assets/image-20181118123652167-2515812.png" alt="image-20181118123652167"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用的方法非常的简单：</p><p>1、先安装</p><pre><code>npm install --save axios vue-axios</code></pre><p>2、引入</p><p>安装之后需要修改 <code>main.js</code> ，在文件中引入并使用 axios 包：</p><p>main.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> VueAxios <span class="token keyword">from</span> <span class="token string">'vue-axios'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueAxios<span class="token punctuation">,</span> axios<span class="token punctuation">)</span></code></pre><p>3、使用</p><p>引入了之后，我们就可以在项目中使用以下三种方法来使用 axios 了：</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="案例：通过-axios-请求-easy-mock"><a href="#案例：通过-axios-请求-easy-mock" class="headerlink" title="案例：通过 axios 请求 easy-mock"></a>案例：通过 axios 请求 easy-mock</h2><p>easy-mock 是一个第三方数据模拟平台，我们可以在该平台上编写接口、模拟数据，然后在项目中使用 axios 请求接口获取数据。</p><p>1、注册、登录 easy-mock 并添加一个新的项目</p><p><img src="/medias/assets/image-20181118124107279-2516067.png" alt="image-20181118124107279"></p><p>输入项目名称和基础地址：</p><p><img src="/medias/assets/image-20181118124340180-2516220.png" alt="image-20181118124340180"></p><p>添加成功之后，点击进入该项目：</p><p><img src="/medias/assets/image-20181118124411837-2516251.png" alt="image-20181118124411837"></p><p>2、创建接口</p><p><img src="/medias/assets/image-20181118124446480-2516286.png" alt="image-20181118124446480"></p><p>输入模拟数据的语法：</p><p><img src="/medias/assets/image-20181118125035410-2516635.png" alt="image-20181118125035410"></p><p>3、在 main.js 中设置接口基地址</p><p>main.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> VueAxios <span class="token keyword">from</span> <span class="token string">'vue-axios'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueAxios<span class="token punctuation">,</span> axios<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'https://www.easy-mock.com/mock/5bf0edf4643497494c87d25d/api/v1'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">;</span></code></pre><p>4、在 Home.vue 中显示数据</p><p>Home.vue</p><p>在初始化时执行 AJAX 获取数据：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      goods<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/goods'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>goods <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>将数据绑定到页面：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(v,k) in goods<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>k<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{v.goods_name}} ￥ {{v.price}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>效果：</p><p><img src="/medias/assets/image-20181118125807214-2517087.png" alt="image-20181118125807214"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
